jQuery(document).ready(function(){
	jQuery('input[type=checkbox]:not(.rememberme)').on('click', function() {
		if ( jQuery(this).parent().find('input[type=hidden]').val() == 'off' ) {
			jQuery(this).parent().find('input[type=hidden]').val('on');
		} else {
			jQuery(this).parent().find('input[type=hidden]').val('off');
		}
		jQuery(this).parent().toggleClass('pe-active');
	});

	jQuery('input[type=radio]').on('click', function() {
		jQuery(this).parent().parent().find('.pe-radio').removeClass('pe-active');
		jQuery(this).parent().toggleClass('pe-active');
	});

	jQuery('.pe-close-icon').on('click', function() {
		jQuery(this).parent().find('input[type=checkbox]').prop('checked', true);
		jQuery(this).parent().find('img').remove();
		jQuery(this).parent().find('a').remove();
		jQuery(this).parent().parent().find('.pe-file-path').html('');
		jQuery(this).remove();
	});

	jQuery('input[name=author_pe_password]').on('keyup', function() {
		if ( jQuery(this).val().length < 8 ) {
			jQuery(this).css('border-color', 'red');
		} else {
			jQuery(this).css('border-color', 'green');
		}
	});

	jQuery('input[name=author_pe_repeat_password]').on('keyup', function() {
		if ( jQuery(this).val() != jQuery('input[name=author_pe_password]').val() ) {
			jQuery(this).css('border-color', 'red');
		} else if ( jQuery(this).val().length > 8 ) {
			jQuery(this).css('border-color', 'green');
		}
	});

	jQuery('#pe-user-edit-form input[type=submit]').on('click', function(e) {
		e.preventDefault();
		var text_errors = pe_check_text();
		var file_errors = pe_check_file();
		var error_count = text_errors+file_errors;
		if ( error_count > 0 ) {
			jQuery('html, body').animate({
				scrollTop: jQuery("#user-profile-extra-fields").offset().top-100
			}, 500);
		} else {
			jQuery('#pe-user-edit-form').submit();
		}
	});

	function pe_check_text() {
		var error = 0;
		jQuery('.form-table.profile-editor.extra input[type=text], textarea, .form-table.profile-editor.extra input[type=password], .pe-edit-form.extra input[type=text], textarea, .pe-edit-form.extra input[type=password]').each(function() {
			// Remove previous error notices
			if ( jQuery(this).parent().find('.pe-incorrent-error').length ) {
				jQuery(this).parent().find('.pe-incorrent-error').remove();
			};

			// Check if empty
			if ( jQuery(this).attr('data-empty') == 'on' && jQuery(this).val().length <= 0 ) {
				jQuery(this).addClass('incorrect');
				error = error+1;
				var top_position = jQuery(this).position().top;
				var error_top = top_position+10;
				jQuery(this).parent().append('<span class="pe-incorrent-error" style="position: absolute; top: '+error_top+'px;">This field can\'t be empty.</span>');
				return true;
			} else if ( jQuery(this).attr('data-empty') == 'on' && jQuery(this).val().length > 0 ) {
				jQuery(this).removeClass('incorrect');
			}

			// Check min length
			if ( jQuery(this).attr('data-min') != '' && jQuery(this).val().length < jQuery(this).attr('data-min') ) {
				jQuery(this).addClass('incorrect');
				error = error+1;
				var top_position = jQuery(this).position().top;
				var error_top = top_position+10;
				jQuery(this).parent().append('<span class="pe-incorrent-error" style="position: absolute; top: '+error_top+'px;">This field has to be at least '+jQuery(this).attr('data-min')+' characters long.</span>');
				return true;
			} else if ( jQuery(this).attr('data-min') != '' && jQuery(this).val().length > jQuery(this).attr('data-min') ) {
				jQuery(this).removeClass('incorrect');
			}

			// Check if field contains @ OR http:// OR https://
			if ( jQuery(this).attr('data-syntax') == 'on' ) {
				if ( jQuery(this).val().indexOf("@") >= 0 || jQuery(this).val().indexOf("http://") >= 0 || jQuery(this).val().indexOf("https://") >= 0 ) {
					jQuery(this).removeClass('incorrect');
				} else {
					jQuery(this).addClass('incorrect');
					error = error+1;
					var top_position = jQuery(this).position().top;
					var error_top = top_position+10;
					jQuery(this).parent().append('<span class="pe-incorrent-error" style="position: absolute; top: '+error_top+'px;">This field expects an URL or email address.</span>');
					return true;
				}	
			}
		});

		return error;
	}

	function pe_check_file() {
		var file_error = 0;
		jQuery('.form-table.profile-editor.extra input[type=file], .pe-edit-form.extra input[type=file]').each(function() {
			var current_file = jQuery(this);
			if ( jQuery(this).val() != '' ) {
				var current_file_size = current_file['0'].files['0'].size/1024;
			}
			// Remove previous error notices
			if ( jQuery(this).parent().find('.pe-incorrent-error').length ) {
				jQuery(this).parent().find('.pe-incorrent-error').remove();
			};

			// Check if empty
			if ( jQuery(this).attr('data-empty') == 'on' && jQuery(this).val() == '' && !jQuery(this).hasClass('file-added') ) {
				jQuery(this).parent().addClass('incorrect');
				file_error = file_error+1;
				jQuery(this).show();
				var top_position = jQuery(this).position().top;
				jQuery(this).hide();
				var error_top = top_position+10;
				jQuery(this).parent().append('<span class="pe-incorrent-error" style="position: absolute; top: '+error_top+'px;">This field can\'t be empty.</span>');
				return true;
			} else if ( jQuery(this).attr('data-empty') == 'on' && jQuery(this).val() != '' ) {
				jQuery(this).parent().removeClass('incorrect');
			}

			// Check size
			if ( jQuery(this).val() != '' && jQuery(this).attr('data-max_size') != '' && jQuery(this).attr('data-max_size') < current_file_size && !jQuery(this).hasClass('file-added') ) {
				jQuery(this).parent().addClass('incorrect');
				file_error = file_error+1;
				jQuery(this).show();
				var top_position = jQuery(this).position().top;
				jQuery(this).hide();
				var error_top = top_position+10;
				jQuery(this).parent().append('<span class="pe-incorrent-error" style="position: absolute; top: '+error_top+'px;">File needs to be below '+jQuery(this).attr('data-max_size')+'KB.</span>');
				return true;
			} else if ( jQuery(this).val() != '' && jQuery(this).attr('data-max_size') != '' && jQuery(this).attr('data-max_size') > current_file_size ) {
				jQuery(this).parent().removeClass('incorrect');
			}

			// Check extension
			if ( jQuery(this).val() != '' && jQuery(this).attr('data-extensions') != '' && !jQuery(this).hasClass('file-added') && jQuery(this).attr('data-extensions') != 'all' ) {
				var available_extensions = jQuery(this).attr('data-extensions');
				var extension_array = available_extensions.split('/');
				var file_path = jQuery(this).val().split('.');
				var path_size = file_path.length-1;
				var file_extension = file_path[path_size];
				if ( jQuery.inArray( file_extension, extension_array ) == '-1' ) {
					jQuery(this).parent().addClass('incorrect');
					file_error = file_error+1;
					jQuery(this).show();
					var top_position = jQuery(this).position().top;
					jQuery(this).hide();
					var error_top = top_position+10;
					jQuery(this).parent().append('<span class="pe-incorrent-error" style="position: absolute; top: '+error_top+'px;">File needs to be in '+jQuery(this).attr('data-extensions')+' formats.</span>');
					return true;
				} else {
					jQuery(this).parent().removeClass('incorrect');
				}
			}

		});

		return file_error;
	}

	jQuery('.pe-styled-upload button').on('click', function(e) {
		e.preventDefault();
		jQuery(this).parent().find('input[type=file]').click();
	});

	jQuery('.pe-styled-upload input[type=file]').on('change', function() {
		jQuery(this).parent().find('.pe-file-path').html(jQuery(this).val());
	});

});